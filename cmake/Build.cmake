# Copyright (C) 2013-2024 Christian Fischbach <cf@cflib.de>
#
# This file is part of cflib.
#
# Licensed under the MIT License.

# find more Qt components
function(cf_find_qt)
    find_package(Qt5 ${Qt5_VERSION} COMPONENTS ${ARGN} REQUIRED)
endfunction()

# library
function(cf_lib lib)
    cmake_parse_arguments(ARG "ENABLE_MOC;ENABLE_SER;ENABLE_UIC" "" "PUBLIC;PRIVATE;DIRS;OTHER_FILES" ${ARGN})

    cf_find_sources(sources . ${ARG_DIRS} OTHER_FILES ${ARG_OTHER_FILES})
    add_library(${lib} ${sources})
    cf_configure_target(${lib} ${ARG_ENABLE_MOC} ${ARG_ENABLE_SER} ${ARG_ENABLE_UIC})
    target_include_directories(${lib} INTERFACE "${PROJECT_SOURCE_DIR}")
    target_link_libraries(${lib} PUBLIC ${ARG_PUBLIC} PRIVATE ${ARG_PRIVATE})
endfunction()

# application
function(cf_app app)
    cmake_parse_arguments(ARG "ENABLE_MOC;ENABLE_SER;ENABLE_UIC;ENABLE_GIT_VERSION;CF_INTERN" "" "DIRS;OTHER_FILES" ${ARGN})

    cf_find_sources(sources . ${ARG_DIRS} OTHER_FILES ${ARG_OTHER_FILES})
    add_executable(${app} ${sources})
    cf_configure_target(${app} ${ARG_ENABLE_MOC} ${ARG_ENABLE_SER} ${ARG_ENABLE_UIC})
    target_include_directories(${app} PRIVATE .)
    if(NOT ARG_CF_INTERN)
        set_target_properties(${app} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin")
    endif()
    target_link_libraries(${app} PRIVATE ${ARG_UNPARSED_ARGUMENTS})

    # strip release builds and split debug info
    add_custom_command(TARGET "${app}" POST_BUILD
        COMMAND $<$<CONFIG:Release>:${CMAKE_STRIP}>           ARGS --strip-all $<TARGET_FILE:${app}>
        COMMAND $<$<CONFIG:RelWithDebInfo>:${CMAKE_OBJCOPY}>  ARGS --only-keep-debug $<TARGET_FILE:${app}> $<TARGET_FILE:${app}>.debug
        COMMAND $<$<CONFIG:RelWithDebInfo>:${CMAKE_STRIP}>    ARGS -g $<TARGET_FILE:${app}>
        COMMAND $<$<CONFIG:RelWithDebInfo>:${CMAKE_OBJCOPY}>  ARGS --add-gnu-debuglink=$<TARGET_FILE:${app}>.debug $<TARGET_FILE:${app}>
    )

    # gitversion.h
    if(ARG_ENABLE_GIT_VERSION)
        set(dest "${app}_autogen")
        set(header "${dest}/gitversion.h")
        add_custom_command(
            OUTPUT "${header}"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${dest}"
            COMMAND gitversion create "${CMAKE_SOURCE_DIR}" "${header}"
            DEPENDS "${CMAKE_SOURCE_DIR}/.git/logs/HEAD"
        )
        target_sources(${app} PRIVATE "${header}")
        get_property(target_dir TARGET ${app} PROPERTY BINARY_DIR)
        target_include_directories(${app} PRIVATE "${target_dir}/${dest}")
    endif()
endfunction()

# test
function(cf_test test lib)
    cmake_parse_arguments(ARG "ENABLE_SER" "" "DIRS" ${ARGN})

    cf_find_sources(sources . ${ARG_DIRS})
    add_executable(${test} ${sources})
    cf_configure_target(${test} TRUE ${ARG_ENABLE_SER} FALSE)
    target_link_libraries(${test} PRIVATE ${lib} Qt5::Test)
    add_test(NAME ${test} COMMAND ${test})
endfunction()

# configure target
function(cf_configure_target target enable_moc enable_ser enable_uic)
    # PCH
    if(ENABLE_PCH)
        target_precompile_headers(${target} REUSE_FROM pch_core)
    endif()

    # Qt generated sources
    set_target_properties(${target} PROPERTIES AUTOMOC ${enable_moc})
    set_target_properties(${target} PROPERTIES AUTORCC TRUE)
    set_target_properties(${target} PROPERTIES AUTOUIC ${enable_uic})

    # autogenerated serialization
    if(enable_ser)
        # get header files
        get_target_property(headers ${target} SOURCES)
        list(FILTER headers INCLUDE REGEX "\.h$")

        # filter by containing of SERIALIZE_CLASS
        foreach(header ${headers})
            file(STRINGS "${header}" lines REGEX "SERIALIZE_CLASS")
            if(NOT lines)
                list(REMOVE_ITEM headers "${header}")
            endif()
        endforeach()

        # Something to do?
        if(NOT headers)
            return()
        endif()

        foreach(header ${headers})
            # get output filename (dir/header.h -> target_autogen/dir/header_ser.cpp)
            set(rel_dir "${target}_autogen")
            get_filename_component(dir "${header}" DIRECTORY)
            if(dir)
                set(rel_dir "${rel_dir}/${dir}")
            endif()
            get_filename_component(source "${header}" NAME_WLE)
            set(source "${rel_dir}/${source}_ser.cpp")

            # add generation step
            add_custom_command(
                OUTPUT "${source}"
                COMMAND ${CMAKE_COMMAND} -E make_directory "${rel_dir}"
                COMMAND ser serialize "${CMAKE_CURRENT_SOURCE_DIR}/${header}" "${source}"
                DEPENDS "${header}"
            )
            target_sources(${target} PRIVATE "${source}")
        endforeach()
    endif()
endfunction()

# PCH
if(ENABLE_PCH)
    add_library(pch_core pch/dummy.cpp)
    target_precompile_headers(pch_core PRIVATE pch/core.h)
    target_link_libraries(pch_core PRIVATE Qt5::Core)
endif()
